package com.mycompany.myapp;
import android.app.*;
import android.os.*;
import android.widget.*;
import android.view.*;
import android.media.*;

public class Suara extends Activity
{
	TextView text;
	private AudioTrack sender = null;
	
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		// TODO: Implement this method
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main_suara);
		text = (TextView)findViewById(R.id.text);
		
		Button btn = (Button)findViewById(R.id.play);
		btn.setOnClickListener(new View.OnClickListener()
		{
			public void onClick(View v)
			{
				playSound();
			}
		});
	}
	private void playSound() {
		try {
			byte[] wavein = WaveEncoder.encode(WaveEncodeTest
											   .getBytes(WaveEncodeTest.SDATA));

			text.setText(""+wavein+" "+wavein.length);
			if (sender != null) {
				sender.release();
			}

			sender = new AudioTrack(AudioManager.STREAM_MUSIC,
									Constant.WAVE_RATE_INHZ, AudioFormat.CHANNEL_OUT_MONO,
									AudioFormat.ENCODING_PCM_8BIT,
									Constant.WAVEOUT_BUF_SIZE * 2, AudioTrack.MODE_STATIC);
			sender.write(wavein, 0, wavein.length);
			sender.play();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

class WaveEncoder 
{
	public static byte[] encode(byte[] data) {
		byte[] ret = new byte[data.length * Constant.BIT_PER_BYTE
			* Constant.POINT_PER_BIT];

		int retOffset = 0;

		for (int i = 0; i < data.length; i++) {
			// UART start
			convertBit(ret, retOffset, 0);
			retOffset += Constant.POINT_PER_BIT;

			// UART data
			for (int j = 0; j < 8; j++) {
				convertBit(ret, retOffset, (data[i] & (0x01 << (7 - j))));
				retOffset += Constant.POINT_PER_BIT;
			}

			// UART stop
			convertBit(ret, retOffset, 1);
			retOffset += Constant.POINT_PER_BIT;
		}

		return ret;

	}
	private static void convertBit(byte[] ret, int offset, int bit) {
		int index = offset;
		for (int i = 0; i < Constant.POINT_PER_BIT / 2; i++) {
			ret[index++] = (bit > 0 ? Constant.WAVE_LOW_LEVEL
				: Constant.WAVE_HIGH_LEVEL);
		}
		for (int i = 0; i < Constant.POINT_PER_BIT / 2; i++) {
			ret[index++] = (bit > 0 ? Constant.WAVE_HIGH_LEVEL
				: Constant.WAVE_LOW_LEVEL);
		}
	}
}

class WaveEncodeTest {

	/**
	 * Test data.
	 */
	public static final char[] SDATA = { 0xFF, 0xc8, 0x29, 0x23, 0xbe, 0x84,
		0xe1, 0x6c, 0xd6, 0xae, 0x52, 0x90, 0x49, 0xf1, 0xf1, 0xbb, 0xe9,
		0xeb, 0xb3, 0xa6, 0xdb, 0x3c, 0x87, 0x0c, 0x3e, 0x99, 0x24, 0x5e,
		0x0d, 0x1c, 0x06, 0xb7, 0x47, 0xde, 0xb3, 0x12, 0x4d, 0xc8, 0x43,
		0xbb, 0x8b, 0xa6, 0x1f, 0x03, 0x5a, 0x7d, 0x09, 0x38, 0x25, 0x1f,
		0x5d, 0xd4, 0xcb, 0xfc, 0x96, 0xf5, 0x45, 0x3b, 0x13, 0x0d, 0x89,
		0x0a, 0x1c, 0xdb, 0xae, 0x32, 0x20, 0x9a, 0x50, 0xee, 0x40, 0x78,
		0x36, 0xfd, 0x12, 0x49, 0x32, 0xf6, 0x9e, 0x7d, 0x49, 0xdc, 0xad,
		0x4f, 0x14, 0xf2, 0x44, 0x40, 0x66, 0xd0, 0x6b, 0xc4, 0x30, 0xb7,
		0x32, 0x3b, 0xa1, 0x22, 0xf6, 0x22, 0x91, 0x9d, 0xe1, 0x8b, 0x1f,
		0xda, 0xb0, 0xca, 0x99, 0x02, 0xb9, 0x72, 0x9d, 0x49, 0x2c, 0x80,
		0x7e, 0xc5, 0x99, 0xd5, 0xe9, 0x80, 0xb2, 0xea, 0xc9, 0xcc, 0x53,
		0xbf, 0x67, 0xd6, 0xbf, 0x14, 0xd6, 0x7e, 0x2d, 0xdc, 0x8e, 0x66,
		0x83, 0xef, 0x57, 0x49, 0x61, 0xff, 0x69, 0x8f, 0x61, 0xcd, 0xd1,
		0x1e, 0x9d, 0x9c, 0x16, 0x72, 0x72, 0xe6, 0x1d, 0xf0, 0x84, 0x4f,
		0x4a, 0x77, 0x02, 0xd7, 0xe8, 0x39, 0x2c, 0x53, 0xcb, 0xc9, 0x12,
		0x1e, 0x33, 0x74, 0x9e, 0x0c, 0xf4, 0xd5, 0xd4, 0x9f, 0xd4, 0xa4,
		0x59, 0x7e, 0x35, 0xcf, 0x32, 0x22, 0xf4, 0xcc, 0xcf, 0xd3, 0x90,
		0x2d, 0x48, 0xd3, 0x8f, 0x75, 0xe6, 0xD9 };

	/**
	 * Test data.
	 */
	public static final char[] DDATA = { 0xFF, 0xc8, 0x29, 0x23, 0xbe, 0x84,
		0xe1, 0x6c, 0xd6, 0xae, 0x52, 0x90, 0x49, 0xf1, 0xf1, 0xbb, 0xe9,
		0xeb, 0xb3, 0xa6, 0xdb, 0x3c, 0x87, 0x0c, 0x3e, 0x99, 0x24, 0x5e,
		0x0d, 0x1c, 0x06, 0xb7, 0x47, 0xde, 0xb3, 0x12, 0x4d, 0xc8, 0x43,
		0xbb, 0x8b, 0xa6, 0x1f, 0x03, 0x5a, 0x7d, 0x09, 0x38, 0x25, 0x1f,
		0x5d, 0xd4, 0xcb, 0xfc, 0x96, 0xf5, 0x45, 0x3b, 0x13, 0x0d, 0x89,
		0x0a, 0x1c, 0xdb, 0xae, 0x32, 0x20, 0x9a, 0x50, 0xee, 0x40, 0x78,
		0x36, 0xfd, 0x12, 0x49, 0x32, 0xf6, 0x9e, 0x7d, 0x49, 0xdc, 0xad,
		0x4f, 0x14, 0xf2, 0x44, 0x40, 0x66, 0xd0, 0x6b, 0xc4, 0x30, 0xb7,
		0x32, 0x3b, 0xa1, 0x22, 0xf6, 0x22, 0x91, 0x9d, 0xe1, 0x8b, 0x1f,
		0xda, 0xb0, 0xca, 0x99, 0x02, 0xb9, 0x72, 0x9d, 0x49, 0x2c, 0x80,
		0x7e, 0xc5, 0x99, 0xd5, 0xe9, 0x80, 0xb2, 0xea, 0xc9, 0xcc, 0x53,
		0xbf, 0x67, 0xd6, 0xbf, 0x14, 0xd6, 0x7e, 0x2d, 0xdc, 0x8e, 0x66,
		0x83, 0xef, 0x57, 0x49, 0x61, 0xff, 0x69, 0x8f, 0x61, 0xcd, 0xd1,
		0x1e, 0x9d, 0x9c, 0x16, 0x72, 0x72, 0xe6, 0x1d, 0xf0, 0x84, 0x4f,
		0x4a, 0x77, 0x02, 0xd7, 0xe8, 0x39, 0x2c, 0x53, 0xcb, 0xc9, 0x12,
		0x1e, 0x33, 0x74, 0x9e, 0x0c, 0xf4, 0xd5, 0xd4, 0x9f, 0xd4, 0xa4,
		0x59, 0x7e, 0x35, 0xcf, 0x32, 0x22, 0xf4, 0xcc, 0xcf, 0xd3, 0x90,
		0x2d, 0x48, 0xd3, 0x8f, 0x75, 0xe6, 0xD9 };

	/**
	 * Compare SData with the target data.
	 * 
	 * @param tar
	 *            The target data to be compared.
	 * @return The result.
	 */
	public static boolean compareSData(byte[] tar) {
		if (tar == null) {
			return false;
		}
		if (SDATA.length != tar.length) {
			return false;
		}
		for (int i = 0; i < SDATA.length; i++) {
			if ((SDATA[i] & 0xff) != (tar[i] & 0xff)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Convert char array to byte array.
	 * 
	 * @param src
	 *            The char array to be converted.
	 * @return The result array.
	 */
	public static byte[] getBytes(char[] src) {
		byte[] ret = new byte[src.length];
		for (int i = 0; i < ret.length; i++) {
			ret[i] = (byte) (src[i] & 0xff);
		}
		return ret;
	}
}

class Constant {

	/**
	 * Wave frequency in Hz.
	 */
	public static final int WAVE_RATE_INHZ = 44100;

	/**
	 * The max length of a data packet in bytes, include the packet head and
	 * payload.
	 */
	public static final int MAX_TRANSFER_DATA_LEN = 200;

	/**
	 * The number of wave sample points of one certain data bit.
	 */
	public static final int POINT_PER_BIT = 6;

	/**
	 * The half number of wave sample points of one certain data bit.
	 */
	public static final int POINT_PER_BIT_HALF = 3;

	/**
	 * The number of bits of a UART encoded data byte.
	 */
	public static final int BIT_PER_BYTE = 10;

	/**
	 * The number of wave sample points of one certain UART encoded data byte,
	 * equals to POINT_PER_BIT * BIT_PER_BYTE.
	 */
	public static final int POINT_PER_UART = POINT_PER_BIT * BIT_PER_BYTE;

	/**
	 * The length of wave formated data header, equals to 0x2c, defined by
	 * MicroSoft.
	 */
	public static final int WAVE_HEAD_LEN = 0x2c;

	/**
	 * The max length of buffer per data packet.
	 */
	public static final int WAVEOUT_BUF_SIZE = MAX_TRANSFER_DATA_LEN
	* POINT_PER_BIT * BIT_PER_BYTE + WAVE_HEAD_LEN;

	/**
	 * The offset of the 4 bytes param of data length in the wave header.
	 */
	public static final int WAVE_DATA_LEN_OFFSET = 0x28;

	/**
	 * The offset of the 4 bytes param of file length in the wave header.
	 */
	public static final int WAVE_FILE_LEN_OFFSET = 0x04;

	/**
	 * The byte value for the high level.
	 */
	public static final byte WAVE_HIGH_LEVEL = (byte) 0xF0;

	/**
	 * The byte value for the low level.
	 */
	public static final byte WAVE_LOW_LEVEL = (byte) 0x10;

	/**
	 * The byte value for the mute level.
	 */
	public static final byte WAVE_MUTE_LEVEL = (byte) 0x80;

	/**
	 * The value indicate the two different levels.
	 */
	public static final int WAVE_DIFF_LEVEL = 0x30 * 0xFF;

	/**
	 * The sum value indicate the two different levels.
	 */
	public static final int WAVE_DIFF_SUM_LEVEL = POINT_PER_BIT_HALF
	* (WAVE_DIFF_LEVEL & 0xff);

	/**
	 * The wave header template.
	 */
	public static final byte WAVE_HEADER[] = { 0x52, 0x49, 0x46, 0x46,
		(byte) 0xF8, 0x00, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D,
		0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x44,
		(byte) 0xAC, 0x00, 0x00, 0x44, (byte) 0xAC, 0x00, 0x00, 0x01, 0x00,
		0x08, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00 };

	/**
	 * The value of start flag of the data packet.
	 */
	public static final byte PACKET_START_FLAG = (byte) 0xFF;

	/**
	 * 1 - on PC;<br/>
	 * 0 - on Android;
	 */
	public static final int MANCHESTER_HIGH = 1;

	/**
	 * 0 - on PC;<br/>
	 * 1 - on Android;
	 */
	public static final int MANCHESTER_LOW = 0;

	/**
	 * The magnification for the rawdata of the wave.
	 */
	public static final int MAGNIFICATION = 10;

	/**
	 * The value of mute level after amplificated.
	 */
	public static final int AMPLIFICATION_LEVEL_MUTE = Short.MAX_VALUE;
}
